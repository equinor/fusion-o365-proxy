parameters:
  - name: subscriptionService
  - name: k8sNamespace
  - name: k8sSecretName
  - name: aadApplicationId

steps:
  - task: AzurePowerShell@4
    displayName: 'Ensure secret'
    inputs:
      azureSubscription: ${{ parameters.subscriptionService }}
      ScriptType: 'InlineScript'
      FailOnStandardError: true
      azurePowerShellVersion: 'LatestVersion'
      Inline: |
          $k8sNamespace = "${{ parameters.k8sNamespace }}"
          $k8sSecretName = "${{ parameters.k8sSecretName }}"

          $adSecrets = Get-AzADAppCredential -ApplicationId "${{ parameters.aadApplicationId }}"

          $kSecret = kubectl -n $k8sNamespace get secret $k8sSecretName --ignore-not-found=true -o json | ConvertFrom-Json

          ## Key already exist
          if ($null -ne $kSecret) {
              $currentSecret = $adSecrets | where -Property KeyId -eq $kSecret.metadata.labels.keyId
              if ($currentSecret -ne $null) {
                if ([DateTime]::Parse($currentSecret.EndDate) -gt (Get-Date).AddDays(35)) {
                    Write-Host "Key still valid to $($currentSecret.EndDate) - skipping"
                    return
                }
              } else {
                Write-Host "Could not locate key from label"
              }
          }

          Write-Host "Creating new secret"

          # Not including special characters as these can produce invalid secrets...          
          $passwordString = -join ((48..57) + (65..90) + (97..122) + (33,35) + (36..38) | Get-Random -Count 64 | foreach {[char]$_})
          $password = ConvertTo-SecureString -String $passwordString -AsPlainText -Force
          $startDate = Get-Date
          $endDate = $startDate.AddMonths(3)
          $secret = New-AzADAppCredential -Password $password -ApplicationId "${{ parameters.aadApplicationId }}" -StartDate $startDate -EndDate $endDate


          kubectl -n $k8sNamespace delete secret $k8sSecretName --ignore-not-found
          kubectl -n $k8sNamespace create secret generic $k8sSecretName --from-literal=clientSecret=$passwordString
          kubectl -n $k8sNamespace label secret $k8sSecretName keyId="$($secret.KeyId)" --overwrite

          kubectl -n $k8sNamespace rollout restart deploy  